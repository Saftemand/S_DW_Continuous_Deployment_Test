<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dynamicweb.Integration
</name>
</assembly>
<members>
<member name="M:Dynamicweb.Integration.Specialized.UserDestinationActivity.Process">
	<summary>
 Takes care of adding to the queue
 </summary>
	<remarks>
 What if it are multiple database rows ? should we import to a dataset and loop through the rows or use a xmlreader?
 </remarks>
</member><member name="M:Dynamicweb.Integration.Specialized.UnitDestinationActivity.Process">
	<summary>
 Takes care of adding to the queue
 </summary>
	<remarks>
 What if it are multiple database rows ? should we import to a dataset and loop through the rows or use a xmlreader?
 </remarks>
</member><member name="M:Dynamicweb.Integration.Specialized.PageDestinationActivity.GetPageIdsDictionary">
 Returns dictionary of old_id --&gt; new_id

</member><member name="M:Dynamicweb.Integration.Specialized.CurrencyDestinationActivity.Process">
	<summary>
 Takes care of adding to the queue
 </summary>
	<remarks>
 What if it are multiple database rows ? should we import to a dataset and loop through the rows or use a xmlreader?
 </remarks>
</member><member name="P:Dynamicweb.Integration.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Dynamicweb.Integration.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Dynamicweb.Integration.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:Dynamicweb.Integration.CSVImportField.FieldType">
	<summary>
 Stores and retrieves field type value.
 </summary>
	<value>Integer</value>
	<returns>Type of the field.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImportField.FieldTypeFormatted">
	<summary>
 Determins type of the field format.
 </summary>
	<value>String</value>
	<returns>String with specified field type. Otherwise empty string.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImportField.Width">
	<summary>
 Stores and retrieves value of width.
 </summary>
	<value>Integer</value>
	<returns>Width value.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImportField.WidthFormatted">
	<summary>
 Returns Width value. 
 </summary>
	<value>String</value>
	<returns>String representation of the width. Otherwise empty string.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImportField.Name">
	<summary>
 Stores and retrieves name of the fieled.
 </summary>
	<value>String</value>
	<returns>Name</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImportField.ColumnNumber">
	<summary>
 Stores and retrieves value column number.
 </summary>
	<value>Integer</value>
	<returns>Number of the colomn.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImportField.iniString">
	<summary>
 Returns a string for <i>*.ini</i> file.
 </summary>
	<value>String</value>
	<remarks></remarks>
</member><member name="T:Dynamicweb.Integration.CSVImportField">
	<summary>
 This class contains properties for use with <see cref="T:T:Dynamicweb.CSVImport">CSVImport class</see>.
 </summary>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImport.UseSchemaIni">
	<summary>
 Stores and retrieves value wich determins whether SchemaIni is used.
 </summary>
	<value>Boolean statement.</value>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImport.FileFormat">
	<summary>
 Stores and retrieves CSV Format value and sets to use SchemaIni. 
 </summary>
	<value>Integer.</value>
	<returns>CSV Format value.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImport.FileFormatFormatted">
	<summary>
 Determins a delimet file format.
 </summary>
	<value>String.</value>
	<returns>String specified by FileFormat property. Otherwise empty string.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImport.FileCharacterSet">
	<summary>
 Stores and retrieves character set value of the file and sets to use SchemaIni file.
 </summary>
	<value>Integer.</value>
	<returns>Value of character set.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImport.FileCharacterSetFormatted">
	<summary>
 Determins characterset of the file.
 </summary>
	<value>String</value>
	<returns>String specified by file character set. Otherwise empty string.</returns>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImport.ColNameHeader">
	<summary>
  Stores and retrieves column header name value.
 </summary>
	<value>Boolean</value>
	<remarks></remarks>
</member><member name="P:Dynamicweb.Integration.CSVImport.MaxScanRows">
	<summary>
 Stores and retrieves value of the max scan rows. 
 </summary>
	<value>Integer</value>
	<returns>Value of rows.</returns>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.#ctor(System.String)">
	<summary>
 Sets a new import file.
 </summary>
	<param name="strFilepath">Current path of the file.</param>
	<exception cref="T:System.Exception">Thrown:
 <list type="bullet">
			<item><description>If file not found.</description></item>
		</list>
	</exception>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.#ctor">
	<summary>
 friend constructor, used for mocking
 </summary>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.AddField(Dynamicweb.Integration.CSVImportField)">
	<summary>
 Add a new CVSImport field.
 </summary>
	<param name="Field">Current field.</param>
	<remarks>Also sets to use SchemaIni.</remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.WriteSchemaIni">
	<summary>
 Writes SchemaIni file.
 </summary>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.ForceText(System.Int32)">
	<summary>
 Set a new array of fields.
 </summary>
	<param name="NumberOfColumns"></param>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.ForceText(System.String)">
	<summary>
 Set a new array of fields.
 </summary>
	<param name="csvNamesOfColumns"></param>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.MakeTextField(System.Int32)">
	<summary>
 Makes and add new text field.
 </summary>
	<param name="Index">Current index of the field.</param>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.MakeTextField(System.Int32,System.String)">
	<summary>
 Makes and add new text field.
 </summary>
	<param name="index">Current index of the field.</param>
	<param name="Name">Current name of the string.</param>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.getData">
	<summary>
 Gets data from the current data source.
 </summary>
	<returns>The collection of tables contained in the DataSet.</returns>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.getDataSet">
	<summary>
  Gets data from the current data source.
 </summary>
	<returns>Current data set.</returns>
	<remarks></remarks>
</member><member name="M:Dynamicweb.Integration.CSVImport.getDataSet(System.Int32)">
	<summary>
  Gets the first "count" rows of data from the current data source.
 </summary>
	<returns>Current data set.</returns>
	<remarks></remarks>
</member><member name="T:Dynamicweb.Integration.CSVImport">
	<summary>
 This class contains properties and functions use for CSV import handling.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>
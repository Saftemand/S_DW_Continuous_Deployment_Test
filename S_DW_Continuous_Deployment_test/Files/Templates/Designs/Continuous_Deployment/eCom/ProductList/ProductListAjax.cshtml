@Include("includes/ProductListTmpl.cshtml")

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

<script>
	var JsonProductListPageId = 8413; /* The hidden product json page */
	
	function LoadFromUrl() { /* This json request builds the page in relation to the url - Makes it possible to sendt the url link to a friend or bookmark it */
	    var Url = "";
	    if ($(location).attr('href').indexOf("?") >= 0) {
	    	Url = "&GroupID=@GetString("Ecom:Group.ID")"; //Bad hack to get around those clean URLs without the params
	    } else {
	    	Url = "?GroupID=@GetString("Ecom:Group.ID")"; //Bad hack to get around those clean URLs without the params
	    }

	    var UrlSplit = Url.split("?");
	    var UrlPart = "Default.aspx?ID=" + JsonProductListPageId + "&" + UrlSplit[1];

	    $.getJSON(UrlPart, function (jd) {
			BuildContent(jd);
		});
	}
	LoadFromUrl();


	function BuildContent(Data) {
		BuildProductList(Data, '#AjaxProductList', '#ProductCardTemplate', true);
	}

	function BuildProductList(Data, DivId, Tmpl, BuildRows) {
		var MainItemCounter = 1;
		var Row = "";

		function CreateItem(Obj, DivId, Tmpl, BuildRows) {
			/* Remove all the old content */
			$(DivId).innerHTML = "";


			/* This part is about making the template replacer dynamic and easy to read */
			var Template = $(Tmpl).html();

			/* Make sure the rows are added perfectly - Keep in mind that this part is related to product lists, and therefore not dynamic */
			if (BuildRows == true){
				if (MainItemCounter == 3) {
					Row = "row";
					MainItemCounter = 0;
				} else {
					Row = "";
				}

				Template = Template.replace("Row", Row);
			}

			/* Dynamic replacing values in the template */
			for (Property in Obj) {
				Item = Obj[Property];

				var NameKey = "Obj."+Property;

				if (Property != "description"){
					Template = Template.replace(new RegExp(NameKey, "gi"), Item);
				} else {
					Template = Template.replace(new RegExp(NameKey, "gi"), TruncateString(Item, 60)); //This is non dynamic and should be removed by truncating directly on the json feed template
				}
			}

			$(DivId).append(Template);

        	MainItemCounter++;
		}

		/* Build the product list, one item after another */
		for (var i = 0; i < Data.products.length; i++) {
			CreateItem(Data.products[i], DivId, Tmpl, BuildRows);
		}
	}

	/* Just a little function to make texts shorter */
	function TruncateString(str, length) {
		return str.length > length ? str.substring(0, length - 3) + '...' : str;
	}
</script>


@* This is where we render the content *@
<div id="AjaxProductList">

</div>

